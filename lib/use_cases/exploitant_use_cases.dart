import 'package:directus_api_manager/directus_api_manager.dart';
//import 'package:vr_web_admin/models/player.dart';
import 'package:vr_web_admin/models/sessions.dart';
import 'package:vr_web_admin/page/listexplointant_viewmodel.dart';
//import 'package:vr_web_admin/models/user_detail.dart';

class ExploitantUseCases extends DirectusItem implements IExploitantUseCases {
  final DirectusApiManager _apiManager;
  List<DirectusUser> listManager = [];
  List<Sessions> listSession = [];
  List<dynamic> params = [];
  int nbSession = 0;
  final DirectusUser _directusUser;

  ExploitantUseCases(this._apiManager, this._directusUser) : super.newItem();

  @override
  Future<List<DirectusUser>> getListExploitant() async {
    try {
      listManager =
          List<DirectusUser>.from(await _apiManager.getDirectusUserList(
        filter: const PropertyFilter(
          field: "is_admin",
          operator: FilterOperator.equals,
          value: false,
        ),
      ));
      return listManager;
    } catch (exe) {
      print(exe);
      throw false;
    }
  }

// test avec DirectusUser // not used // not used // not used
  @override
  Future<List<DirectusUser>> getUsers() async {
    // print("function getusers");
    List<DirectusUser> usersList;
    List<DirectusUser> newList = [];
    try {
      usersList =
          List<DirectusUser>.from(await _apiManager.getDirectusUserList());

      for (var i = 0; i < usersList.length; i++) {
        if (usersList.elementAt(i).getValue(forKey: "is_admin") == false) {
          getNbSession(usersList.elementAt(i).id);
          newList.add(usersList.elementAt(i));
          // updateNbSession(usersList.elementAt(i).id,
          //    );
        }
      }
    } catch (exe) {
      print(exe);
      throw false;
    }
    return newList;
  }

  // not used // not used // not used // not used // not used // not used

  // @override
  // Future<List<UsersDetails>> getListExploitant() async {
  //   print("function");
  //   listManager = List<UsersDetails>.from(await _apiManager.getDirectusUserList(
  //       filter: const PropertyFilter(
  //     field: "is_admin",
  //     operator: FilterOperator.equals,
  //     value: false,
  //   )));

  //   print(listManager.first.email);

  //   return listManager.toList();
  // }

  //  @override
  // void updateSessionById(String manager, bool status) async {
  //   UsersDetails? myUsers = UsersDetails(_directusUser.getRawData());
  //   myUsers = (await _apiManager.getDirectusUser(manager)) as UsersDetails?;
  //   myUsers!.autorised = status;
  //   await _apiManager.updateDirectusUser(updatedUser: myUsers);
  // }

  @override
  Future<int> getNbSession(String? id) async {
    listSession = List<Sessions>.from(
        await _apiManager.findListOfItems<Sessions>(
            filter: PropertyFilter(
                field: "exploitant_session",
                operator: FilterOperator.equals,
                value: id)));

    nbSession = listSession.length;
    return nbSession;
    //from(await _apiManager.findListOfItems<Sessions>());
    // final Iterable<Sessions> filteredSession =
    //     listSession.where((listSession) => listSession.manager == id);
    //return listSession.length;
  }

  // @override
  // void updateSessionById(String manager, bool status) async {
  //   final UsersDetails myManager =
  //       await _apiManager.getSpecificItem(id: manager);
  //   myManager.autorised = status;
  //   await _apiManager.updateItem(objectToUpdate: myManager);
  // }
  void updateNbSession(String? manager, int nbSession) async {
    DirectusUser myUser = DirectusUser(_directusUser.getRawData());
    myUser = (await _apiManager.getDirectusUser(manager!))!;
    myUser.setValue(nbSession, forKey: "nb_session");
    await _apiManager.updateDirectusUser(updatedUser: myUser);
  }

  @override
  void updateSessionById(String manager, bool status) async {
    DirectusUser myUser = DirectusUser(_directusUser.getRawData());
    myUser = (await _apiManager.getDirectusUser(manager))!;
    myUser.setValue(status, forKey: "is_autorised");
    await _apiManager.updateDirectusUser(updatedUser: myUser);
  }

  //   void updateSessionById2(String manager, bool status) async {
  //   final DirectusUser? myManager =
  //       await _apiManager.getDirectusUser(manager);
  //   myManager!.getValue(forKey: 'is_autorised') = status;
  //   await _apiManager.updateDirectusUser(updatedUser: myManager);
  // }

//Not used anymore...
  // @override
  // Future<List> getInfo(String? idCurrentManager) async {
  //   final List<UsersDetails> listUser;
  //   try {
  //     listUser = List<UsersDetails>.from(
  //         await _apiManager.findListOfItems<UsersDetails>());
  //     final Iterable<UsersDetails> filteredID = listUser
  //         .where((listUser) => listUser.identification == idCurrentManager);
  //     if (filteredID.isNotEmpty) {
  //       params.insert(0, filteredID.first.rs);
  //       params.insert(1, filteredID.first.inscription);
  //       params.insert(2, filteredID.first.autorised);
  //       params.insert(3, getNbSession(idCurrentManager));
  //     } else {
  //       throw false;
  //     }

  //     return params;
  //   } catch (exe) {
  //     print(exe);
  //     throw false;
  //   }
  // }
}
