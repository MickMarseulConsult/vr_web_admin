import 'package:directus_api_manager/directus_api_manager.dart';
import 'package:vr_web_admin/models/player.dart';
import 'package:vr_web_admin/models/sessions.dart';
import 'package:vr_web_admin/page/listexplointant_viewmodel.dart';
import 'package:vr_web_admin/models/user_detail.dart';

class ExploitantUseCases extends DirectusItem implements IExploitantUseCases {
  final DirectusApiManager _apiManager;
  List<UsersDetails> listManager = [];
  List<Sessions> listSession = [];
  List<dynamic> params = [];

  ExploitantUseCases(this._apiManager) : super.newItem();

  @override
  Future<List<UsersDetails>> getListExploitant() async {
    listManager = List<UsersDetails>.from(
        await _apiManager.findListOfItems<UsersDetails>(
            filter: const PropertyFilter(
                field: "admin",
                operator: FilterOperator.equals,
                value: false)));

    return listManager.toList();
  }

  @override
  Future<int> getNbSession(String? id) async {
    listSession = List<Sessions>.from(
        await _apiManager.findListOfItems<Sessions>(
            filter: PropertyFilter(
                field: "exploitant_session",
                operator: FilterOperator.equals,
                value: id)));
    //from(await _apiManager.findListOfItems<Sessions>());
    // final Iterable<Sessions> filteredSession =
    //     listSession.where((listSession) => listSession.manager == id);
    return listSession.length;
  }

  @override
  void updateSessionById(String manager, bool status) async {
    final UsersDetails myManager =
        await _apiManager.getSpecificItem(id: manager);
    myManager.autorised = status;
    await _apiManager.updateItem(objectToUpdate: myManager);
  }

//Not used anymore...
  // @override
  // Future<List> getInfo(String? idCurrentManager) async {
  //   final List<UsersDetails> listUser;
  //   try {
  //     listUser = List<UsersDetails>.from(
  //         await _apiManager.findListOfItems<UsersDetails>());
  //     final Iterable<UsersDetails> filteredID = listUser
  //         .where((listUser) => listUser.identification == idCurrentManager);
  //     if (filteredID.isNotEmpty) {
  //       params.insert(0, filteredID.first.rs);
  //       params.insert(1, filteredID.first.inscription);
  //       params.insert(2, filteredID.first.autorised);
  //       params.insert(3, getNbSession(idCurrentManager));
  //     } else {
  //       throw false;
  //     }

  //     return params;
  //   } catch (exe) {
  //     print(exe);
  //     throw false;
  //   }
  // }
}
