import 'package:directus_api_manager/directus_api_manager.dart';
import 'package:flutter/material.dart';
import 'package:vr_web_admin/generated/l10n.dart';
//import 'package:vr_web_admin/page/widgets/line_exploitant_viewmodel.dart';

abstract class IExploitantUseCases {
  Future<String> getInfo(String? id);
}

class LineExploitant extends StatefulWidget {
  final List<DirectusUser> usersList;
  final Future<List> managerFuture;
  //final ILineExploitantViewModel _viewModel;
  final int id;
  const LineExploitant(this.usersList, this.id, this.managerFuture,
      {super.key});

  @override
  State<LineExploitant> createState() => _LineExploitantState();
}

class _LineExploitantState extends State<LineExploitant> {
  bool _active = true;

  final MaterialStateProperty<Icon?> thumbIcon =
      MaterialStateProperty.resolveWith<Icon?>(
    (Set<MaterialState> states) {
      // Thumb icon when the switch is selected.
      if (states.contains(MaterialState.selected)) {
        return const Icon(Icons.check);
      }
      return const Icon(Icons.close);
    },
  );
  @override
  Widget build(BuildContext context) {
    if (widget.usersList.elementAt(widget.id).description != "admin") {
      return SizedBox(
        width: double.infinity,
        height: 50,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              flex: 2,
              child: Text(widget.usersList.elementAt(widget.id).email),
            ),
            Expanded(
              flex: 2,
              child: Text(widget.usersList.elementAt(widget.id).fullName),
            ),
            Expanded(
                flex: 6,
                child: FutureBuilder<List>(
                    future: widget.managerFuture,
                    builder: (context, snapshot) {
                      if (snapshot.hasData) {
                        return Row(
                          children: [
                            Expanded(
                              flex: 2,
                              child: Text(snapshot.data![0]),
                            ),
                            Expanded(
                              flex: 2,
                              child: Text(snapshot.data![1].toString()),
                            ),
                            Expanded(
                              flex: 2,
                              child: Switch(
                                thumbIcon: thumbIcon,
                                value: _active,
                                onChanged: (bool value) {
                                  setState(() {
                                    _active = value;
                                  });
                                },
                              ),
                            )
                          ],
                        );
                      } else if (snapshot.hasError) {
                        return Text('Error: ${snapshot.error}');
                      } else {
                        return const CircularProgressIndicator();
                      }
                    })),
            // Expanded(
            //   flex: 2,
            //   child: Text(usersList.elementAt(id).),
            // ),
          ],
        ),
      );
    } else {
      return const SizedBox();
    }
  }
}
