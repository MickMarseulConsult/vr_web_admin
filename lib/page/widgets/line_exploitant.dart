//import 'package:directus_api_manager/directus_api_manager.dart';
import 'package:flutter/material.dart';
import 'package:vr_web_admin/generated/l10n.dart';
//import 'package:vr_web_admin/models/sessions.dart';
import 'package:vr_web_admin/models/user_detail.dart';
//import 'package:vr_web_admin/page/widgets/line_exploitant_viewmodel.dart';

abstract class IExploitantUseCases {
  //Future<String> getInfo(String? id);
}

class LineExploitant extends StatefulWidget {
  final List<UsersDetails> usersList;
  //final Future<List> managerFuture;
  final int id;
  final int nbSession;
  final userTouchedUpdateButton;

  const LineExploitant(
      this.usersList, this.id, this.nbSession, this.userTouchedUpdateButton,
      {super.key});

  @override
  State<LineExploitant> createState() => _LineExploitantState();
}

class _LineExploitantState extends State<LineExploitant> {
  bool _active = false;

  // Future<int> getNbSession(String? id) async {
  //   List<Sessions> listSession = [];
  //   listSession = List<Sessions>.from(
  //       await _apiManager.findListOfItems<Sessions>(
  //           filter: PropertyFilter(
  //               field: "exploitant_session",
  //               operator: FilterOperator.equals,
  //               value: id)));
  //   return listSession.length;
  // }

  final MaterialStateProperty<Icon?> thumbIcon =
      MaterialStateProperty.resolveWith<Icon?>(
    (Set<MaterialState> states) {
      // Thumb icon when the switch is selected.
      if (states.contains(MaterialState.selected)) {
        return const Icon(Icons.check);
      }
      return const Icon(Icons.close);
    },
  );

  @override
  void initState() {
    super.initState();
    // set initial value of _active to autorised
    _active = widget.usersList.elementAt(widget.id).autorised;
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
        width: 1200,
        height: 70,
        child: Card(
          elevation: 2,
          margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                  flex: 2,
                  child: Container(
                    padding: const EdgeInsets.all(10),
                    child: Text(widget.usersList.elementAt(widget.id).rs),
                  )),
              Expanded(
                flex: 2,
                child: Text(
                    '${widget.nbSession}${S.of(context).nb_session} ${widget.usersList.elementAt(widget.id).inscription.toString()}'),
              ),
              Expanded(
                flex: 2,
                child: Switch(
                  thumbIcon: thumbIcon,
                  value: _active,
                  onChanged: (bool value) {
                    setState(() {
                      _active = value;
                      widget.userTouchedUpdateButton(
                          widget.usersList.elementAt(widget.id).id, value);
                    });
                  },
                ),
              ),
            ],
          ),
        ));
  }
}
